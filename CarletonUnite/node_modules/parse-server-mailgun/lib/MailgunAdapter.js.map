{"version":3,"sources":["../src/MailgunAdapter.js"],"names":["mailgun","require","mailcomposer","Mustache","co","fs","path","MailAdapter","ERRORS","missing_configuration","missing_mailgun_settings","bad_template_config","invalid_callback","invalid_template_name","MailgunAdapter","constructor","options","Error","apiKey","domain","fromAddress","templates","Object","keys","length","name","subject","pathPlainText","callback","cache","message","templateVars","selectedTemplate","_sendMail","templateName","template","config","direct","recipient","variables","from","to","link","appName","user","userVars","_validateUserVars","assign","username","get","email","_mailGenerator","bind","catch","e","console","error","compiled","pathHtml","cachedTemplate","plainTextEmail","_loadEmailTemplate","toString","text","render","htmlEmail","html","composer","mimeString","Promise","resolve","reject","build","payload","messages","sendMime","body","sendPasswordResetEmail","sendVerificationEmail","send","readFile","err","data","validUserVars","module","exports"],"mappings":"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","file":"MailgunAdapter.js","sourcesContent":["const mailgun = require('mailgun-js');\nconst mailcomposer = require('mailcomposer');\nconst Mustache = require('mustache');\nconst co = require('co');\nconst fs = require('fs');\nconst path = require('path');\nconst MailAdapter = require('./MailAdapter');\n\nconst ERRORS = {\n    missing_configuration: 'MailgunAdapter requires configuration.',\n    missing_mailgun_settings: 'MailgunAdapter requires valid API Key, domain and fromAddress.',\n    bad_template_config: 'MailgunAdapter templates are not properly configured.',\n    invalid_callback: 'MailgunAdapter template callback is not a function.',\n    invalid_template_name: 'Invalid options object: missing templateName'\n};\n\n/**\n * MailAdapter implementation used by the Parse Server to send\n * password reset and email verification emails though Mailgun\n * @classnpm install --save-dev babel-preset-es2015-node\n */\nclass MailgunAdapter extends MailAdapter {\n    constructor(options) {\n        if (!options) {\n            throw new Error(ERRORS.missing_configuration);\n        }\n        \n        super(options);\n\n        const { apiKey, domain, fromAddress } = options;\n        if (!apiKey || !domain || !fromAddress) {\n            throw new Error(ERRORS.missing_mailgun_settings);\n        }\n\n        const { templates } = options;\n        if (!templates || Object.keys(templates).length === 0) {\n            throw new Error(ERRORS.bad_template_config);\n        }\n\n        for (let name in templates) {\n            const { subject, pathPlainText, callback } = templates[name];\n\n            if (typeof subject !== 'string' || typeof pathPlainText !== 'string') {\n                throw new Error(ERRORS.bad_template_config);\n            }\n\n            if (callback && typeof callback !== 'function') {\n                throw new Error(ERRORS.invalid_callback);\n            }\n        }\n\n        this.mailcomposer = mailcomposer;\n        this.mailgun = mailgun({ apiKey, domain });\n        this.fromAddress = fromAddress;\n        this.templates = templates;\n        this.cache = {};\n        this.message = {};\n        this.templateVars = {};\n        this.selectedTemplate = {};\n    }\n\n    /**\n     * Method to send MIME emails via Mailgun\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    _sendMail(options) {\n        let templateName = this.selectedTemplate.name = options.templateName;\n        if (!templateName) {\n            throw new Error(ERRORS.invalid_template_name);\n        }\n\n        let template = this.selectedTemplate.config = this.templates[templateName];\n        if (!template) {\n            throw new Error(`Could not find template with name ${templateName}`);\n        }\n\n        // The adapter is used directly by the user's code instead via Parse Server\n        if (options.direct) {\n            const { subject, fromAddress, recipient, variables } = options;\n            \n            if (!recipient) {\n                throw new Error(`Cannot send email with template ${templateName} without a recipient`);\n            }\n\n            this.templateVars = variables || {};\n            this.message = {\n                from: fromAddress || this.fromAddress,\n                to: recipient,\n                subject: subject || template.subject\n            };\n        } else {\n            const { link, appName, user } = options;\n            const { callback } = template;\n            \n            let userVars;\n            if (callback && typeof callback === 'function') {\n                userVars = callback(user);\n                userVars = this._validateUserVars(userVars);\n            }\n\n            this.templateVars = Object.assign({\n                link,\n                appName,\n                username: user.get('username'),\n                email: user.get('email')\n            }, userVars);\n\n            this.message = {\n                from: this.fromAddress,\n                to: user.get('email'),\n                subject: template.subject\n            };\n        }\n\n        return co(this._mailGenerator.bind(this)).catch(e => console.error(e));\n    }\n\n    /**\n     * Generator function that handles that handles all the async operations:\n     * template loading, MIME string building and email sending.\n     */\n    *_mailGenerator() {\n        let compiled;\n        let template = this.selectedTemplate.config;\n        let templateName = this.selectedTemplate.name;\n        let pathPlainText = template.pathPlainText;\n        let pathHtml = template.pathHtml;\n        let cachedTemplate = this.cache[templateName] = this.cache[templateName] || {};\n\n        // Load plain-text version\n        if (!cachedTemplate['text']) {\n            let plainTextEmail = yield this._loadEmailTemplate(pathPlainText);\n            plainTextEmail = plainTextEmail.toString('utf8');\n            cachedTemplate['text'] = plainTextEmail;\n        }\n\n        // Compile plain-text template\n        this.message.text = Mustache.render(cachedTemplate['text'], this.templateVars);\n\n        // Load html version if available\n        if (pathHtml) {\n            if (!cachedTemplate['html']) {\n                let htmlEmail = yield this._loadEmailTemplate(pathHtml);\n                cachedTemplate['html'] = htmlEmail.toString('utf8');\n            }\n            // Add processed HTML to the message object\n            this.message.html = Mustache.render(cachedTemplate['html'], this.templateVars);;\n        }\n\n        // Initialize mailcomposer with message\n        const composer = this.mailcomposer(this.message);\n\n        // Create MIME string\n        const mimeString = yield new Promise((resolve, reject) => {\n            composer.build((error, message) => {\n                if (error) reject(error);\n                resolve(message);\n            });\n        });\n\n        // Assemble payload object for Mailgun\n        const payload = {\n            to: this.message.to,\n            message: mimeString.toString('utf8')\n        };\n\n        return new Promise((resolve, reject) => {\n            this.mailgun.messages().sendMime(payload, (error, body) => {\n                if (error) reject(error);\n                resolve(body);\n            });\n        });\n    }\n\n    /**\n     * sendMail wrapper to send an email with password reset link\n     * The options object would have the parameters link, appName, user\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    sendPasswordResetEmail({ link, appName, user }) {\n        return this._sendMail({ templateName: 'passwordResetEmail', link, appName, user });\n    }\n\n    /**\n     * sendMail wrapper to send an email with an account verification link\n     * The options object would have the parameters link, appName, user\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    sendVerificationEmail({ link, appName, user }) {\n        return this._sendMail({ templateName: 'verificationEmail', link, appName, user });\n    }\n\n    /**\n     * sendMail wrapper to send general purpose emails\n     * The options object would have the parameters:\n     * - templateName: name of template to be used\n     * - subject: overrides the default value\n     * - fromAddress: overrides the default from address\n     * - recipient: email's recipient\n     * - variables: An object whose property names represent template variables,\n     *              and whose values will replace the template variable placeholders\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    send({ templateName, subject, fromAddress, recipient, variables }) {\n        return this._sendMail({ templateName, subject, fromAddress, recipient, variables, direct: true });\n    }\n\n    /**\n     * Simple Promise wrapper to asynchronously fetch the contents of a template.\n     * @param {String} path\n     * @returns {Promise}\n     */\n    _loadEmailTemplate(path) {\n        return new Promise((resolve, reject) => {\n            fs.readFile(path, (err, data) => {\n                if (err) reject(err);\n                resolve(data);\n            });\n        });\n    }\n\n    /**\n     * Validator for user provided template variables\n     * @param {Object} userVars\n     * @returns {Object}\n     */\n    _validateUserVars(userVars) {\n        const validUserVars = userVars && userVars.constructor === Object;\n        // Fall back to an empty object if the callback did not return an Object instance\n        return validUserVars ? userVars : {};\n    }\n}\n\nmodule.exports = MailgunAdapter;"]}